library(readr)
data <- read_csv("data.csv")
View(data)
install.packages(c("UsingR","reshape2", "coefplot"))
install.packages(c("UsingR","reshape2", "coefplot"))
library(tidyverse)
library(UsingR)
#Using fathers’ heights to predict sons’ heights using simple linear regression.
data(father.son, package='UsingR')
head(father.son)
#scatter plot with regression line
ggplot(father.son, aes(x=fheight, y=sheight)) + geom_point() +
geom_smooth(method="lm", se=TRUE) + labs(x="Fathers", y="Sons")
#regression using 'lm' function
heightsLM <- lm(sheight ~ fheight, data=father.son)
heightsLM
summary(heightsLM)
View(data)
View(data)
ggplot(data, aes(x=points_per_game_ppg, y = total_minutes_as_duration)) + geom_point() +
geom_smooth(method="lm", se=TRUE) + labs(x="Points", y="Time")
ggplot(data, aes(x=points_per_game_ppg, y = total_minutes_as_duration)) + geom_point() +
geom_smooth(method="lm", se=TRUE) + labs(x="Points", y="Time")
#regression using 'lm' function
heightsLM <- lm(sheight ~ fheight, data=father.son)
heightsLM
summary(heightsLM)
#ANOVA Alternative
#An alternative to running an ANOVA test is to fit a regression
#with just one categorical variable and no intercept term.
library(reshape2)
data(tips, package="reshape2")
tipsAnova <- aov(tip ~ day - 1, data=tips)
coefficients(tipsAnova)
# putting -1 in the formula indicates that the intercept should not be
# included in the model;
# the categorical variable day is automatically setup to have a
# coefficient for each level
tipsLM <- lm(tip ~ day - 1, data=tips)
summary(tipsAnova)
#calculate the means and CI manually
library(dplyr)
tipsByDay <- tips %>%
group_by(day) %>%
dplyr::summarize(
tip.mean=mean(tip), tip.sd=sd(tip),
Length=NROW(tip),
tfrac=qt(p=.90, df=Length-1),
Lower=tip.mean - tfrac*tip.sd/sqrt(Length),
Upper=tip.mean + tfrac*tip.sd/sqrt(Length))
# now extract them from the summary for tipsLM
tipsInfo <- summary(tipsLM)
tipsCoef <- as.data.frame(tipsInfo$coefficients[, 1:2])
tipsCoef <- within(tipsCoef, {
Lower <- Estimate - qt(p=0.90, df=tipsInfo$df[2]) * `Std. Error`
Upper <- Estimate + qt(p=0.90, df=tipsInfo$df[2]) * `Std. Error`
day <- rownames(tipsCoef)})
# plot them both
ggplot(tipsByDay, aes(x=tip.mean, y=day)) + geom_point() +
geom_errorbarh(aes(xmin=Lower, xmax=Upper), height=.3) +
ggtitle("Tips by day calculated manually")
install.packages(c("UsingR","reshape2", "coefplot"))
head(data)
data <- read.csv('data.csv')
head(data)
data <- read.csv('data.csv')
row_index <- 149
column_name <- 'total_minutes_as_duration'
new_value <- '1:30:24'
data[149, total_minutes_as_duration] <- new_value
column_name <- 'total_minutes_as_duration'
new_value <- '1:30:24'
data[149, total_minutes_as_duration] <- new_value
data[149, total_minutes_as_duration] <- new_value
data[149, 16] <- new_value
write.csv(data, 'data1.csv', row.names = FALSE)
View(data)
View(data)
data[149,15] <- new_value
new_value <- '1:30:24'
data[149,15] <- new_value
write.csv(data, 'data1.csv', row.names = FALSE)
View(data)
data <- read.csv('data.csv')
row_index <- 149
column_name <- 'points'
new_value <- '0'
data[149,16] <- new_value
write.csv(data, 'data1.csv', row.names = FALSE)
View(data)
data <- read.csv('data.csv')
row_index <- 149
column_name <- 'total_minutes_as_duration'
new_value <- '1:30:24'
data[149,15] <- new_value
write.csv(data, 'data1.csv', row.names = FALSE)
View(data)
ggplot(data, aes ( x = 'shots_on_goal_sog', y ='total_minutes_as_duration')) +
geom_point()+
geom_smooth(method = "lm", se = true) +
labs( x = "sog", y = "minutes")
ggplot(data, aes ( x = 'shots_on_goal_sog', y ='total_minutes_as_duration')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
#scatter plot with regression line
ggplot(father.son, aes(x=fheight, y=sheight)) + geom_point() +
geom_smooth(method="lm", se=TRUE) + labs(x="Fathers", y="Sons")
ggplot(data, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data, aes ( x = 'height', y ='weight')) +
geom_line()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data1, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
head(data)
ggplot(data, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data, aes ( x = 'penalties_in_minutes_pim', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data, aes ( x = 'penalties_in_minutes_pim', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
library(tidyverse)
library(ggplot2)
library(dplyr)
install.packages(c("UsingR","reshape2", "coefplot"))
library(UsingR)
library(readr)
data1 <- read_csv("data1.csv")
View(data1)
head(data)
ggplot(data, aes ( x = 'penalties_in_minutes_pim', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data1, aes ( x = 'penalties_in_minutes_pim', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
head(data1)
str(data1)
ggplot(data1, aes ( x = 'penalties_in_minutes_pim', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
ggplot(data1, aes ( x = 'points_per_game_ppg', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "sog", y = "minutes")
data5 <- data.frame(
x_variable = rnorm(100),
y_variable = rnorm(100)
)
ggplot(data5, aes(x = x_variable, y = y_variable)) +
geom_point() +
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
ggplot(data5, aes(x = x_variable, y = y_variable)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
ggplot(data1, aes ( x = 'points_per_game_ppg', y ='weight')) +
geom_point()+
labs( x = "sog", y = "minutes")
ggplot(data1, aes(x = heights)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram", x = "X-axis Label", y = "Frequency")
ggplot(data1, aes(x = height)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram", x = "X-axis Label", y = "Frequency")
ggplot(data1, aes(x = weight)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram", x = "X-axis Label", y = "Frequency")
ggplot(data1, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "points", y = "weight")
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
# Scatter plot
library(ggplot2)
ggplot(data5, aes(x = x_variable, y = y_variable)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
labs(x = "X Variable", y = "Y Variable", title = "Scatter Plot")
ggplot(data1, aes ( x = 'height', y ='weight')) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "points", y = "weight")
ggplot(data1, aes ( x = height, y =weight)) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "points", y = "weight")
ggplot(data1, aes ( x = points_per_game_ppg, y =weight)) +
geom_point()+
geom_smooth(method = "lm", se = TRUE) +
labs( x = "points", y = "weight")
ppglm <- lm(points_per_game_ppg, y = weight, data = data1)
ppglm <- lm(points_per_game_ppg, y = height, data = data1)
ppglm <- lm(points_per_game_pp ~ y = height, data = data1)
ppglm <- lm(points_per_game_pp ~ height, data = data1)
ppglm <- lm(points_per_game_ppg ~ height, data = data1)
ppglm
summary(ppglm)
library(reshape2)
data(tips, package="reshape2")
View(tips)
View(tips)
data1Anova <- aov(points_per_game_ppg ~ height - 1, data=data1)
coefficients(data1Anova)
summary(tipsLM)
# putting -1 in the formula indicates that the intercept should not be
# included in the model;
# the categorical variable day is automatically setup to have a
# coefficient for each level
tipsLM <- lm(tip ~ day - 1, data=tips)
summary(tipsAnova)
tipsAnova <- aov(tip ~ day - 1, data=tips)
summary(tipsAnova)
summary(tipsLM)
ggplot(data1, aes(x=points_per_game_ppg, fill=Boro)) +
geom_histogram(binwidth=10) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg)) +
geom_histogram(binwidth=10) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg)) +
geom_histogram(binwidth=1) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg)) +
geom_histogram(binwidth=0.1) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg)) +
geom_histogram(binwidth=0.01) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg)) +
geom_histogram(binwidth=0.05) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg, fill = boro)) +
geom_histogram(binwidth=0.05) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg, fill = colours)) +
geom_histogram(binwidth=0.05) + labs (x="ppg")
ggplot(data1, aes(x=points_per_game_ppg, fill = "colours")) +
geom_histogram(binwidth=0.05) + labs (x="ppg")
#faceting on Boro in Figure reveal that
#Brooklyn and Queens make up one mode and Manhattan makes up the other, while there
#is not much data on the Bronx and Staten Island.
ggplot(housing, aes(x=ValuePerSqFt, fill=Boro)) +
geom_histogram(binwidth=10) + labs (x="Value per Square Foot") +
facet_wrap(~Boro)
#Multiple Regression
housing <- read.table("files/housing.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
library(readr)
housing <- read_csv("~/GitHub/Practice/housing.csv")
View(housing)
ggplot(data1, aes(x=points_per_game_ppg, fill = country)) +
geom_histogram(binwidth=0.05) + labs (x="ppg")
geom_histogram(binwidth=0.05) + labs (x="time")
geom_histogram(binwidth=0.05) + labs (x="time")
ggplot(data1,aes( x = total_minutes_as_duration))+
geom_histogram(binwidth=0.05) + labs (x="time")
ggplot(data1,aes( x = total_minutes_as_duration))+
geom_histogram(binwidth=0.1) + labs (x="time")
library(readr)
data <- read_csv("data.csv")
View(data)
View(data)
In this section, we conduct an exploratory data analysis (EDA) to understand the distribution and relationships within our dataset. Our dependent variable of interest is "Points per Game" (avg_points), and we aim to identify key factors influencing this variable.
#| echo: false
# Load tidyverse and read data
library(tidyverse)
#| echo: false
# Load tidyverse and read data
library(tidyverse)
## Exploratory Data Analysis
In this section, we conduct an exploratory data analysis (EDA) to understand the distribution and relationships within our dataset. Our dependent variable of interest is "Points per Game" (avg_points), and we aim to identify key factors influencing this variable.
We will check the data type of all the variables to get an idea of our data.
We will check the data type of all the variables to get an idea of our data.
#| echo: false
# Load tidyverse and read data
library(tidyverse)
#| echo: false
## Exploratory Data Analysis
In this section, we conduct an exploratory data analysis (EDA) to understand the distribution and relationships within our dataset. Our dependent variable of interest is "Points per Game" (avg_points), and we aim to identify key factors influencing this variable.
#| echo: false
# Load tidyverse and read data
library(tidyverse)
#| echo: false
#| echo: false
#| echo: false
df = read_csv("data.csv")
## Exploratory Data Analysis
In this section, we conduct an exploratory data analysis (EDA) to understand the distribution and relationships within our dataset. Our dependent variable of interest is "Points per Game" (avg_points), and we aim to identify key factors influencing this variable.
We will check the data type of all the variables to get an idea of our data.
We will check the data type of all the variables to get an idea of our data.
